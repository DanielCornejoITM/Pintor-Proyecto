/* Generated By:JavaCC: Do not edit this line. ProyectoFase3.java */
/** Simple brace matcher. */
public class ProyectoFase3 implements ProyectoFase3Constants {
        public static int countloc=0x00;
        public static TablaSimbolos tabla= new TablaSimbolos();

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    ProyectoFase3 parser = new ProyectoFase3(System.in);
    parser.Estructura();
    System.out.println("Analisis Finalizado:");
  }

/*METODOS PARA ESTRUCTURA DEL PROGRAMA*/
  static final public void Estructura() throws ParseException {
    jj_consume_token(Identificador);
    jj_consume_token(ORG);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case D32:
      jj_consume_token(D32);
      break;
    case D16:
      jj_consume_token(D16);
      break;
    case D8:
      jj_consume_token(D8);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Directivas_Est();
    Instrucciones_Est();
                                                                              System.out.println("\u005cn");tabla.imprimir();
    jj_consume_token(END);
    jj_consume_token(0);
                                                                                                                                    System.out.println("No hay errores sintacticos");
  }

  static final public void Directivas_Est() throws ParseException {
    Token id;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      id = jj_consume_token(Identificador);
      Directivas(id);
    }
  }

  static final public void Instrucciones_Est() throws ParseException {
    Token id;
    String Identi="";
    jj_consume_token(Punto);
    jj_consume_token(CODE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        id = jj_consume_token(Identificador);
                        if(!tabla.existe(id.image)){
                            tabla.insertar(id.image, countloc, "DIR");
                            Identi=id.image;
                        }
                        else{
                            System.out.println("Error! el ID \u005c""+id.image+"\u005c" ya existe!");
                            java.lang.System.exit(1);
                        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      Instrucciones(Identi);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case CMP:
      case EOR:
      case LSL:
      case LSR:
      case BCHG:
      case PACK:
      case SBCD:
      case JMP:
      case Identificador:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void Instrucciones(String Identi) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BCHG:
      BCHG(Identi);
      break;
    case PACK:
      PACK(Identi);
      break;
    case ADD:
      ADD_METODO(Identi);
      break;
    case JMP:
      JMP_Metodo(Identi);
      break;
    case SBCD:
      SBCD(Identi);
      break;
    case CMP:
      CMP(Identi);
      break;
    case LSL:
    case LSR:
      LSL(Identi);
      break;
    case EOR:
      EOR(Identi);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*FIN METODOS PARA ESTRUCTURA DEL PROGRAMA*/

/*METODOS PARA CREAR LAS DIRECTIVAS*/
  static final public void Directivas(Token id) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DDATA:
      DDATA(id);
      break;
    case BYTE:
    case WORD:
    case LONG:
    case EXT:
    case DEF:
    case EQU:
      BWLEDE(id);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DDATA(Token id) throws ParseException {
 int multi=1;
 String Identi= id.image;
 int bytesOcupados=0;
 String TipoDato="DB";
    jj_consume_token(DDATA);
        multi=Tamanio();
        switch(multi){
            case 1:
                TipoDato="DB";
                break;

            case 2:
                TipoDato="DW";
                break;

            case 4:
                TipoDato="DL";
                break;

        }
        bytesOcupados=Valor();
        {
            if (!tabla.existe(Identi)) {
                tabla.insertar(Identi,countloc,TipoDato);
            }
            else{
                System.out.println("Error el ID \u005c""+Identi+"\u005c"Ya se encuentra");
                java.lang.System.exit(0);
            }
                countloc=(countloc)+(bytesOcupados*multi);
                tabla.setTam(Identi, bytesOcupados*multi);
        }
  }

  static final public void BWLEDE(Token id) throws ParseException {
    String Identi=id.image;
    int bytes=0;
    int aux;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BYTE:
      jj_consume_token(BYTE);
        aux=1;
        if(!tabla.existe(Identi)){
                  tabla.insertar(Identi, countloc, "B");
              }else{
                System.out.println("Error! el ID \u005c""+Identi+"\u005c" ya existe!");
                java.lang.System.exit(1);
              }
      break;
    case WORD:
      jj_consume_token(WORD);
        aux=2;
        if(!tabla.existe(Identi)){
                  tabla.insertar(Identi, countloc, "W");
              }else{
                System.out.println("Error! el ID \u005c""+Identi+"\u005c" ya existe!");
                java.lang.System.exit(1);
              }
      break;
    case LONG:
      jj_consume_token(LONG);
        aux=3;
        if(!tabla.existe(Identi)){
                  tabla.insertar(Identi, countloc, "L");
              }else{
                System.out.println("Error! el ID \u005c""+Identi+"\u005c" ya existe!");
                java.lang.System.exit(1);
              }
      break;
    case EQU:
      jj_consume_token(EQU);
      jj_consume_token(CADENA);
        aux=4;
        if(!tabla.existe(Identi)){
                  tabla.insertar(Identi, countloc, "EQU");
              }else{
                System.out.println("Error! el ID \u005c""+Identi+"\u005c" ya existe!");
                java.lang.System.exit(1);
              }
      break;
    case EXT:
      jj_consume_token(EXT);
      jj_consume_token(CADENA);
        aux=5;
        if(!tabla.existe(Identi)){
                  tabla.insertar(Identi, countloc, "EXT");
              }else{
                System.out.println("Error! el ID \u005c""+Identi+"\u005c" ya existe!");
                java.lang.System.exit(1);
              }
      break;
    case DEF:
      jj_consume_token(DEF);
      jj_consume_token(CADENA);
        aux=6;
        if(!tabla.existe(Identi)){
                  tabla.insertar(Identi, countloc, "DEF");
              }else{
                System.out.println("Error! el ID \u005c""+Identi+"\u005c" ya existe!");
                java.lang.System.exit(1);
              }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Valor2(aux, id);
  }

/*FIN METODOS PARA CREAR LAS DIRECTIVAS*/

/*METODOS INSTRUCCION PACK Y MOVEC*/
/*********************MATTA***************************/
  static final public void PACK(String Identi) throws ParseException {
    int bytesOcupados=0x1;
    jj_consume_token(PACK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Guion:
      PACK_RM();
      jj_consume_token(Coma);
      PACK_RM();
      break;
    case Datos:
      jj_consume_token(Datos);
      jj_consume_token(Coma);
      jj_consume_token(Datos);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        countloc=(countloc)+(bytesOcupados*2);
        System.out.println("DIRECTIVA PACK "+Identi+" tam: "+bytesOcupados);
        tabla.setTam(Identi, bytesOcupados*2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comentario:
      jj_consume_token(Comentario);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void PACK_RM() throws ParseException {
    jj_consume_token(Guion);
    jj_consume_token(ParentesisA);
    jj_consume_token(Memoria);
    jj_consume_token(ParentesisC);
  }

  static final public void BCHG(String Identi) throws ParseException {
    jj_consume_token(BCHG);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Punto:
      jj_consume_token(Punto);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LO:
        jj_consume_token(LO);
        break;
      case BY:
        jj_consume_token(BY);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    BCHG_VAR(Identi);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comentario:
      jj_consume_token(Comentario);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void BCHG_VAR(String Identi) throws ParseException {
    int bytesOcupados=0x1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Datos:
      jj_consume_token(Datos);
      jj_consume_token(Coma);
      BCHG_EA(bytesOcupados, Identi);
      break;
    case Gato:
      jj_consume_token(Gato);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case D32:
        jj_consume_token(D32);
                                                               bytesOcupados=bytesOcupados+4;
        break;
      case D16:
        jj_consume_token(D16);
                                                                                                     bytesOcupados=bytesOcupados+2;
        break;
      case D8:
        jj_consume_token(D8);
                                                                                                                                          bytesOcupados=bytesOcupados+2;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(Coma);
      BCHG_EA(bytesOcupados, Identi);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BCHG_EA(int bytesOcupados, String Identi) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Datos:
      jj_consume_token(Datos);
      break;
    case Guion:
      jj_consume_token(Guion);
      jj_consume_token(ParentesisA);
      jj_consume_token(Memoria);
      jj_consume_token(ParentesisC);
      break;
    case ParentesisA:
      jj_consume_token(ParentesisA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case D8:
      case D16:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case D16:
          jj_consume_token(D16);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Coma:
            jj_consume_token(Coma);
            jj_consume_token(Memoria);
            jj_consume_token(ParentesisC);
                                                            bytesOcupados++;
            break;
          case ParentesisC:
            jj_consume_token(ParentesisC);
            jj_consume_token(Punto);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WO:
              jj_consume_token(WO);
                                                                                                          bytesOcupados++;
              break;
            case LO:
              jj_consume_token(LO);
                                                                                                                                 bytesOcupados=bytesOcupados+2;
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case D8:
          jj_consume_token(D8);
          jj_consume_token(Coma);
          jj_consume_token(Memoria);
          jj_consume_token(Coma);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Memoria:
            jj_consume_token(Memoria);
            break;
          case Datos:
            jj_consume_token(Datos);
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(ParentesisC);
                                                                                 bytesOcupados++;
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case Memoria:
        jj_consume_token(Memoria);
        jj_consume_token(ParentesisC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Mas:
          jj_consume_token(Mas);
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        countloc=(countloc)+(bytesOcupados*2);
        tabla.setTam(Identi, bytesOcupados*2);
  }

/*******************FIN*MATTA***************************/
/*FIN METTODOS INSTRUCCION PACK y MOVEC*/

/*METODOS INSTRUCCIONES JMP Y ADD*/
  static final public void JMP_Metodo(String id) throws ParseException {
    jj_consume_token(JMP);
    JMP_Ea(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comentario:
      jj_consume_token(Comentario);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void JMP_Ea(String id) throws ParseException {
  int bytesOcupados=0x1;
  int multi=2;
    jj_consume_token(ParentesisA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Memoria:
      jj_consume_token(Memoria);
      jj_consume_token(ParentesisC);
      break;
    case D16:
      jj_consume_token(D16);
                                   bytesOcupados++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ParentesisC:
        jj_consume_token(ParentesisC);
        jj_consume_token(Punto);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WO:
          jj_consume_token(WO);
                                                                                 bytesOcupados++;
          break;
        case LO:
          jj_consume_token(LO);
                                                                                                        bytesOcupados+=2;
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case Coma:
        jj_consume_token(Coma);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Memoria:
          jj_consume_token(Memoria);
          break;
        case PC:
          jj_consume_token(PC);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ParentesisC);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case D8:
      jj_consume_token(D8);
       bytesOcupados++;
      jj_consume_token(Coma);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Memoria:
        jj_consume_token(Memoria);
        break;
      case PC:
        jj_consume_token(PC);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(Coma);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Datos:
        jj_consume_token(Datos);
        break;
      case Memoria:
        jj_consume_token(Memoria);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ParentesisC);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    System.out.println("Instruccion JMP");
     System.out.println("DIRECTIVA JMP "+id+" tam: "+bytesOcupados);
    countloc+=bytesOcupados*multi;
    tabla.setTam(id,bytesOcupados*multi);
  }

  static final public void ADD_METODO(String id) throws ParseException {
    jj_consume_token(ADD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Punto:
      jj_consume_token(Punto);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BY:
        jj_consume_token(BY);
        break;
      case WO:
        jj_consume_token(WO);
        break;
      case LO:
        jj_consume_token(LO);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Datos:
      jj_consume_token(Datos);
      jj_consume_token(Coma);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Guion:
      case ParentesisA:
        ADD_Ea2(id);
        break;
      case Datos:
        jj_consume_token(Datos);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case Guion:
    case ParentesisA:
    case Gato:
    case Memoria:
      ADD_Ea1(id);
      jj_consume_token(Coma);
      jj_consume_token(Datos);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comentario:
      jj_consume_token(Comentario);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
  }

  static final public void ADD_Ea1(String id) throws ParseException {
  int bytesOcupados=0x1;
  int multi=2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Memoria:
      jj_consume_token(Memoria);
      break;
    case Guion:
      jj_consume_token(Guion);
      jj_consume_token(ParentesisA);
      jj_consume_token(Memoria);
      jj_consume_token(ParentesisC);
      break;
    case ParentesisA:
      jj_consume_token(ParentesisA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Memoria:
        jj_consume_token(Memoria);
        jj_consume_token(ParentesisC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Mas:
          jj_consume_token(Mas);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        break;
      case D16:
        jj_consume_token(D16);
               bytesOcupados++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Coma:
          jj_consume_token(Coma);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Memoria:
            jj_consume_token(Memoria);
            break;
          case PC:
            jj_consume_token(PC);
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(ParentesisC);
          break;
        case ParentesisC:
          jj_consume_token(ParentesisC);
          jj_consume_token(Punto);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WO:
            jj_consume_token(WO);
                                      bytesOcupados++;
            break;
          case LO:
            jj_consume_token(LO);
                                                             bytesOcupados+=2;
            break;
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case D8:
        jj_consume_token(D8);
              bytesOcupados++;
        jj_consume_token(Coma);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Memoria:
          jj_consume_token(Memoria);
          break;
        case PC:
          jj_consume_token(PC);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(Coma);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Datos:
          jj_consume_token(Datos);
          break;
        case Memoria:
          jj_consume_token(Memoria);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ParentesisC);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case Gato:
      jj_consume_token(Gato);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case D16:
        jj_consume_token(D16);
                  bytesOcupados+=2;
        break;
      case D32:
        jj_consume_token(D32);
                                           bytesOcupados+=4;
        break;
      case D8:
        jj_consume_token(D8);
                                                                   bytesOcupados+=2;
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    System.out.println("Instruccion ADD");

    countloc+=bytesOcupados*multi;
    System.out.println("DIRECTIVA ADD "+id+" tam: "+bytesOcupados);
    tabla.setTam(id,bytesOcupados*multi);
  }

  static final public void ADD_Ea2(String id) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ParentesisA:
      jj_consume_token(ParentesisA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case D16:
        jj_consume_token(D16);
        jj_consume_token(ParentesisC);
        jj_consume_token(Punto);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WO:
          jj_consume_token(WO);
          break;
        case LO:
          jj_consume_token(LO);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case Memoria:
        jj_consume_token(Memoria);
        jj_consume_token(ParentesisC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Mas:
          jj_consume_token(Mas);
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        jj_consume_token(D16);
        jj_consume_token(Coma);
        jj_consume_token(Memoria);
        jj_consume_token(ParentesisC);
        break;
      case D8:
        jj_consume_token(D8);
        jj_consume_token(Coma);
        jj_consume_token(Memoria);
        jj_consume_token(Coma);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Datos:
          jj_consume_token(Datos);
          break;
        case Memoria:
          jj_consume_token(Memoria);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ParentesisC);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case Guion:
      jj_consume_token(Guion);
      jj_consume_token(ParentesisA);
      jj_consume_token(Memoria);
      jj_consume_token(ParentesisC);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*FIN METODOS INSTRUCCIONES JMP Y ADD*/

/*METODOS INSTRUCCIONES CMP Y SBCD*/
  static final public void SBCD(String id) throws ParseException {
    jj_consume_token(SBCD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Punto:
      jj_consume_token(Punto);
      jj_consume_token(BY);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    SBCD_VAR(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comentario:
      jj_consume_token(Comentario);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
  }

  static final public void SBCD_VAR(String id) throws ParseException {
  int bytesOcupados=0x1;
  int temp=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Datos:
      jj_consume_token(Datos);
      jj_consume_token(Coma);
      jj_consume_token(Datos);
      break;
    case Guion:
      jj_consume_token(Guion);
      jj_consume_token(ParentesisA);
      jj_consume_token(Memoria);
      jj_consume_token(ParentesisC);
      jj_consume_token(Coma);
      jj_consume_token(Guion);
      jj_consume_token(ParentesisA);
      jj_consume_token(Memoria);
      jj_consume_token(ParentesisC);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    System.out.println("Instruccion SBCD");
        temp=bytesOcupados*2;
      System.out.println("DIRECTIVA SBCD "+id+" tam: "+bytesOcupados);
    countloc+=temp;
    tabla.setTam(id,temp);
  }

/**************************MATTA*********************/
  static final public void CMP(String Identi) throws ParseException {
    jj_consume_token(CMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Punto:
      jj_consume_token(Punto);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BY:
        jj_consume_token(BY);
        break;
      case LO:
        jj_consume_token(LO);
        break;
      case WO:
        jj_consume_token(WO);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    CMP_EA(Identi);
    jj_consume_token(Coma);
    jj_consume_token(Datos);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comentario:
      jj_consume_token(Comentario);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
  }

  static final public void CMP_EA(String Identi) throws ParseException {
    int bytesOcupados=0x1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Datos:
    case Memoria:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Datos:
        jj_consume_token(Datos);
        break;
      case Memoria:
        jj_consume_token(Memoria);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case Guion:
      jj_consume_token(Guion);
      jj_consume_token(ParentesisA);
      jj_consume_token(Memoria);
      jj_consume_token(ParentesisC);
      break;
    case ParentesisA:
      jj_consume_token(ParentesisA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case D8:
      case D16:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case D16:
          jj_consume_token(D16);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Coma:
            jj_consume_token(Coma);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case Memoria:
              jj_consume_token(Memoria);
                                                 bytesOcupados++;
              break;
            case PC:
              jj_consume_token(PC);
                                                                        bytesOcupados++;
              break;
            default:
              jj_la1[54] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(ParentesisC);
            break;
          case ParentesisC:
            jj_consume_token(ParentesisC);
            jj_consume_token(Punto);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WO:
              jj_consume_token(WO);
                                                                                                                                    bytesOcupados++;
              break;
            case LO:
              jj_consume_token(LO);
                                                                                                                                                           bytesOcupados=bytesOcupados+2;
              break;
            default:
              jj_la1[55] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[56] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case D8:
          jj_consume_token(D8);
          jj_consume_token(Coma);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Memoria:
            jj_consume_token(Memoria);
            break;
          case PC:
            jj_consume_token(PC);
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(Coma);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Memoria:
            jj_consume_token(Memoria);
            break;
          case Datos:
            jj_consume_token(Datos);
            break;
          default:
            jj_la1[58] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(ParentesisC);
                                                                                        bytesOcupados++;
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case Memoria:
        jj_consume_token(Memoria);
        jj_consume_token(ParentesisC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Mas:
          jj_consume_token(Mas);
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case Gato:
      jj_consume_token(Gato);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case D32:
        jj_consume_token(D32);
                 bytesOcupados=bytesOcupados+4;
        break;
      case D16:
        jj_consume_token(D16);
                                                       bytesOcupados=bytesOcupados+2;
        break;
      case D8:
        jj_consume_token(D8);
                                                                                            bytesOcupados=bytesOcupados+2;
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        countloc=(countloc)+(bytesOcupados*2);
        System.out.println("DIRECTIVA CMP "+Identi+" tam: "+bytesOcupados);
        tabla.setTam(Identi, bytesOcupados*2);
  }

/**************************FIN MATTA*********************/
/*FIN METODOS INSTRUCCIONES CMP Y BCSD*/

/*METODOS INSTRUCCIONES EOR Y LSL-LSR*/
/***************************MATTA***********************/
  static final public void LSL(String Identi) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSL:
      jj_consume_token(LSL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Punto:
        jj_consume_token(Punto);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BY:
          jj_consume_token(BY);
          break;
        case LO:
          jj_consume_token(LO);
          break;
        case WO:
          jj_consume_token(WO);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      break;
    case LSR:
      jj_consume_token(LSR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Punto:
        jj_consume_token(Punto);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BY:
          jj_consume_token(BY);
          break;
        case LO:
          jj_consume_token(LO);
          break;
        case WO:
          jj_consume_token(WO);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    LSL_VAR(Identi);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comentario:
      jj_consume_token(Comentario);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
  }

  static final public void LSL_VAR(String Identi) throws ParseException {
    int bytesOcupados=0x1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Datos:
      jj_consume_token(Datos);
      jj_consume_token(Coma);
      jj_consume_token(Datos);
      break;
    case Gato:
      jj_consume_token(Gato);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case D32:
        jj_consume_token(D32);
                 bytesOcupados=bytesOcupados+4;
        break;
      case D16:
        jj_consume_token(D16);
                                                       bytesOcupados=bytesOcupados+2;
        break;
      case D8:
        jj_consume_token(D8);
                                                                                            bytesOcupados=bytesOcupados+2;
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(Coma);
      jj_consume_token(Datos);
      break;
    case Guion:
    case ParentesisA:
      LSL_EA(Identi, bytesOcupados);
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LSL_EA(String Identi, int bytesOcupados) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Guion:
      jj_consume_token(Guion);
      jj_consume_token(ParentesisA);
      jj_consume_token(Memoria);
      jj_consume_token(ParentesisC);
      break;
    case ParentesisA:
      jj_consume_token(ParentesisA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case D16:
        jj_consume_token(D16);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Coma:
          jj_consume_token(Coma);
          jj_consume_token(Memoria);
          jj_consume_token(ParentesisC);
                                                        bytesOcupados++;
          break;
        case ParentesisC:
          jj_consume_token(ParentesisC);
          jj_consume_token(Punto);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WO:
            jj_consume_token(WO);
                                              bytesOcupados++;
            break;
          case LO:
            jj_consume_token(LO);
                                                                      bytesOcupados=bytesOcupados+2;
            break;
          default:
            jj_la1[72] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case D8:
        jj_consume_token(D8);
        jj_consume_token(Coma);
        jj_consume_token(Memoria);
        jj_consume_token(Coma);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Memoria:
          jj_consume_token(Memoria);
          break;
        case Datos:
          jj_consume_token(Datos);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ParentesisC);
                                                                               bytesOcupados++;
        break;
      case Memoria:
        jj_consume_token(Memoria);
        jj_consume_token(ParentesisC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Mas:
          jj_consume_token(Mas);
          break;
        default:
          jj_la1[75] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        countloc=(countloc)+(bytesOcupados*2);
        System.out.println("DIRECTIVA LSL "+Identi+" tam: "+bytesOcupados);
        tabla.setTam(Identi, bytesOcupados*2);
  }

/****************************FIN MATTA*******************/
  static final public void EOR(String id) throws ParseException {
    jj_consume_token(EOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Punto:
      jj_consume_token(Punto);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BY:
        jj_consume_token(BY);
        break;
      case LO:
        jj_consume_token(LO);
        break;
      case WO:
        jj_consume_token(WO);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(Datos);
    jj_consume_token(Coma);
    EOR_EA(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comentario:
      jj_consume_token(Comentario);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
  }

  static final public void EOR_EA(String id) throws ParseException {
  int bytesOcupados=0x1;
  int multi=2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Datos:
      jj_consume_token(Datos);
      break;
    case Guion:
      jj_consume_token(Guion);
      jj_consume_token(ParentesisA);
      jj_consume_token(Memoria);
      jj_consume_token(ParentesisC);
      break;
    case ParentesisA:
      jj_consume_token(ParentesisA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Memoria:
        jj_consume_token(Memoria);
        jj_consume_token(ParentesisC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Mas:
          jj_consume_token(Mas);
          break;
        default:
          jj_la1[81] = jj_gen;
          ;
        }
        break;
      case D16:
        jj_consume_token(D16);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Coma:
          jj_consume_token(Coma);
          jj_consume_token(Memoria);
          jj_consume_token(ParentesisC);
                                         bytesOcupados++;System.out.println("Resultados:"+bytesOcupados);
          break;
        case ParentesisC:
          jj_consume_token(ParentesisC);
          jj_consume_token(Punto);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WO:
            jj_consume_token(WO);
                                      bytesOcupados++;
            break;
          case LO:
            jj_consume_token(LO);
                                                             bytesOcupados+=2;
            break;
          default:
            jj_la1[82] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case D8:
        jj_consume_token(D8);
        jj_consume_token(Coma);
        jj_consume_token(Memoria);
        jj_consume_token(Coma);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Datos:
          jj_consume_token(Datos);
          break;
        case Memoria:
          jj_consume_token(Memoria);
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ParentesisC);
                                                                    bytesOcupados++;
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    System.out.println("Instruccion EOR");
    countloc+=bytesOcupados*multi;
    System.out.println("DIRECTIVA EOR "+id+" tam: "+bytesOcupados);
    tabla.setTam(id,bytesOcupados*multi);
  }

/*FIN METODOS INSTRUCCIONES EOR Y LSL-LSR*/

/*METODOS PARA ASIGNAGION DE TAMAÑO Y VALOR*/
  static final public int Tamanio() throws ParseException {
    int mult;
    int TipoDato2;
    jj_consume_token(Punto);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
                 mult=1;
      break;
    case WO:
      jj_consume_token(WO);
                               mult=2;
      break;
    case LO:
      jj_consume_token(LO);
                                             mult=4;
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return mult;}
    throw new Error("Missing return statement in function");
  }

  static final public int Valor() throws ParseException {
    int bytes;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case D32:
      jj_consume_token(D32);
          bytes=4;
      break;
    case D16:
      jj_consume_token(D16);
                          bytes=2;
      break;
    case D8:
      jj_consume_token(D8);
                                         bytes=1;
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return bytes;}
    throw new Error("Missing return statement in function");
  }

  static final public void Valor2(int aux, Token id) throws ParseException {
    int bytes=0;
    String Identi=id.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case D8:
    case D16:
    case D32:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case D32:
        jj_consume_token(D32);
           bytes=bytes+4;
        break;
      case D16:
        jj_consume_token(D16);
                                 bytes=bytes+2;
        break;
      case D8:
        jj_consume_token(D8);
                                                      bytes=bytes+1;
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
    switch(aux){
    case 1:
        System.out.println("DIRECTIVA BYTE "+Identi+" tam: "+bytes);
        countloc=(countloc)+(bytes);
        tabla.setTam(Identi, bytes);
    break;
    case 2:
        System.out.println("DIRECTIVA WORD id "+Identi+" tam: "+bytes*2);
        countloc=(countloc)+(bytes*2);
        tabla.setTam(Identi, bytes*2);
    break;
    case 3:
        System.out.println("DIRECTIVA LONG id "+Identi+" tam: "+bytes*4);
        countloc=(countloc)+(bytes*4);
        tabla.setTam(Identi, bytes*4);
    break;
    case 4:
        System.out.println("DIRECTIVAB EQU id "+Identi);
    break;
    case 5:
        System.out.println("DIRECTIVA  EXT id "+Identi);
    break;
    case 6:
        System.out.println("DIRECTIVA DEF id "+Identi);
    break;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProyectoFase3TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[91];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x104100,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0xa0,0x0,0x0,0x104100,0x0,0xc0,0x0,0x0,0x4100,0x40000000,0x4100,0x80000000,0x0,0xc0,0x0,0x0,0x0,0x0,0x4100,0xe0,0x0,0x80000000,0x80000000,0x0,0x40000000,0x0,0xc0,0x0,0x0,0x0,0x4100,0x104100,0x80000000,0xc0,0x40000000,0x0,0x4100,0x80000000,0x0,0x0,0x80000000,0xe0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x4100,0x40000000,0x4100,0x104100,0x80000000,0xe0,0x0,0xe0,0x0,0x0,0x0,0x104100,0x80000000,0xc0,0x0,0x0,0x40000000,0x4100,0x80000000,0xe0,0x0,0x0,0x40000000,0xc0,0x0,0x0,0x4100,0x80000000,0xe0,0x104100,0x104100,0x104100,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0xfe00000,0xfc00000,0x20000000,0x40000,0x0,0x400,0x40000,0x0,0x20020000,0x0,0x808,0x60000000,0x0,0x0,0x40000000,0x20000004,0x40000,0x0,0xc0000000,0x808,0xc0000000,0x60000000,0x40000000,0x0,0x400,0x20000004,0x60020004,0x40000,0x0,0xc0000000,0x0,0x808,0xc0000000,0x60000000,0x40000000,0x0,0x40020004,0x0,0x0,0x60000000,0x40000000,0x4,0x400,0x40000,0x20000000,0x0,0x400,0x40000,0x60000000,0xc0000000,0x0,0x808,0xc0000000,0x60000000,0x0,0x0,0x40000000,0x0,0x60020004,0x0,0x400,0x0,0x400,0x0,0x40000,0x0,0x20020004,0x0,0x808,0x60000000,0x0,0x40000000,0x4,0x0,0x400,0x40000,0x0,0x0,0x808,0x60000000,0x40000000,0x20000004,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x1040000,0x1040000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x8302000,0x8302000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x100600,0x100600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x8000000,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public ProyectoFase3(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProyectoFase3(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProyectoFase3TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ProyectoFase3(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProyectoFase3TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ProyectoFase3(ProyectoFase3TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProyectoFase3TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 91; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[190];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 91; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 190; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
