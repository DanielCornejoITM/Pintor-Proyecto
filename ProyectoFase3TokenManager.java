/* Generated By:JavaCC: Do not edit this line. ProyectoFase3TokenManager.java */

/** Token Manager. */
public class ProyectoFase3TokenManager implements ProyectoFase3Constants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x420000000000000L) != 0L || (active1 & 0x1e0000000L) != 0L || (active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 28;
            return 9;
         }
         if ((active0 & 0x1a08000000000000L) != 0L || (active1 & 0x60021f8000faL) != 0L || (active2 & 0x154607082a000L) != 0L)
         {
            jjmatchedKind = 28;
            return 427;
         }
         if ((active0 & 0x8010000000000000L) != 0L || (active1 & 0x7c387fc0003fc05L) != 0L || (active2 & 0x5be008f87710f00L) != 0L)
         {
            jjmatchedKind = 187;
            return 427;
         }
         if ((active1 & 0xc1800007c0000L) != 0L || (active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 28;
            return 11;
         }
         if ((active0 & 0x1800000000000c0L) != 0L || (active1 & 0x30000000000300L) != 0L || (active2 & 0x240ab0008000000L) != 0L)
            return 427;
         if ((active0 & 0x100000000L) != 0L)
            return 5;
         if ((active0 & 0x40000000000020L) != 0L || (active1 & 0xf800000000000000L) != 0L || (active2 & 0x10000c107fL) != 0L)
            return 89;
         if ((active0 & 0x800000000000L) != 0L)
            return 13;
         return -1;
      case 1:
         if ((active0 & 0x17e8000000000000L) != 0L || (active1 & 0xffccffcffffffef8L) != 0L || (active2 & 0xfffffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 187;
               jjmatchedPos = 1;
            }
            return 274;
         }
         if ((active0 & 0x8810000000000000L) != 0L || (active1 & 0x33003000000107L) != 0L || (active2 & 0x7bff00000000000L) != 0L)
            return 274;
         return -1;
      case 2:
         if ((active0 & 0x1e10000000000000L) != 0L || (active1 & 0xfefff21ffd010aL) != 0L || (active2 & 0x640f7d1000L) != 0L)
            return 428;
         if ((active0 & 0x1e8000000000000L) != 0L || (active1 & 0xff00000de002fef0L) != 0L || (active2 & 0xf9bf082efffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 187;
               jjmatchedPos = 2;
            }
            return 428;
         }
         return -1;
      case 3:
         if ((active0 & 0x1c8000000000000L) != 0L || (active1 & 0x7f0057affe7afe00L) != 0L || (active2 & 0xb5990826f80L) != 0L)
            return 429;
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x80000000000000f0L) != 0L || (active2 & 0x4826000807fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 187;
               jjmatchedPos = 3;
            }
            return 429;
         }
         return -1;
      case 4:
         if ((active1 & 0x860L) != 0L || (active2 & 0x68020000006L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 187;
               jjmatchedPos = 4;
            }
            return 430;
         }
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x800000018000f090L) != 0L || (active2 & 0x803c0008079L) != 0L)
            return 430;
         return -1;
      case 5:
         if ((active1 & 0x8e0L) != 0L || (active2 & 0x28000000006L) != 0L)
            return 431;
         if ((active2 & 0x40020000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 5;
            return 431;
         }
         return -1;
      case 6:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 6;
            return 432;
         }
         if ((active2 & 0x40000000000L) != 0L)
            return 432;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 46);
      case 35:
         return jjStopAtPos(0, 49);
      case 36:
         return jjStartNfaWithStates_0(0, 47, 13);
      case 37:
         return jjStopAtPos(0, 48);
      case 38:
         return jjStopAtPos(0, 44);
      case 40:
         return jjStopAtPos(0, 34);
      case 41:
         return jjStopAtPos(0, 35);
      case 42:
         return jjStopAtPos(0, 33);
      case 43:
         return jjStopAtPos(0, 30);
      case 44:
         return jjStopAtPos(0, 43);
      case 45:
         return jjStopAtPos(0, 31);
      case 46:
         return jjStopAtPos(0, 42);
      case 47:
         return jjStartNfaWithStates_0(0, 32, 5);
      case 58:
         return jjStopAtPos(0, 40);
      case 59:
         return jjStopAtPos(0, 41);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc1800007c0000L, 0x80L);
      case 66:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0xf800000000000000L, 0x10000c107fL);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x1f800002L, 0x506000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x420000000000000L, 0x1e0000000L, 0x4000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1a00000000000000L, 0x600200000008L, 0x1000000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0L, 0x4007082a000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x28000000000000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x300000L);
      case 76:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x30000000000300L, 0x200a00000000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000fc00L, 0x2000180000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x803000000000L, 0x4000000400100L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x3000000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x10000L, 0x10000000000200L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c0000000000000L, 0x607000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40007c000000005L, 0x800010400L);
      case 84:
         jjmatchedKind = 182;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xb0008000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L, 0x800L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x500000000000000L);
      case 87:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 36);
      case 93:
         return jjStopAtPos(0, 37);
      case 123:
         return jjStopAtPos(0, 38);
      case 124:
         return jjStopAtPos(0, 45);
      case 125:
         return jjStopAtPos(0, 39);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x6580L);
      case 67:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 63, 274);
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 184, 274);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1800000000000002L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0x7c0040L, active2, 0x8000L);
      case 69:
         if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 179, 274);
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x3000010100L, active2, 0x200000000L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x7fL);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x6000000000L);
      case 73:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 177, 274);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 183, 274);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1e0000200L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 76:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 180, 274);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L, active2, 0x8000000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1f000090L, active2, 0x100000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x180000020000L, active2, 0x800800L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x188000000000000L, active1, 0x3c0e0000000fc00L, active2, 0x180400000L);
      case 80:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 274);
         break;
      case 81:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 64, 274);
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x2000000000000L, active2, 0xb0020040000L);
      case 83:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 174, 274);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 186, 274);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x203c000000000020L, active2, 0x482a0000L);
      case 84:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 175, 274);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 181, 274);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x40c17000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7cc00000000L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x200000008L, active2, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x11000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 428);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 428);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 146, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x400000000000000L, active2, 0xb0040000000L);
      case 66:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x78000000000L, active2, 0x8000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x781L);
      case 68:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 428);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 152, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0x100000780000L, active2, 0L);
      case 69:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 162, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x8020000006L);
      case 70:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 71:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 428);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 428);
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 73:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 75:
         if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 76:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 428);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 116, 428);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 118, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000c00020000L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x60L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x200L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x90L, active2, 0x800800000L);
      case 80:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 148, 428);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 150, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1e000000L, active2, 0x800L);
      case 82:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 428);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 428);
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 115, 428);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 117, 428);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 119, 428);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 147, 428);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 149, 428);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 153, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x400000000000L, active2, 0x40000000000L);
      case 83:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 154, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x210000020L);
      case 84:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 428);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 155, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x200000000L, active2, 0x1000000040L);
      case 85:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 428);
         break;
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1e000fc00L, active2, 0x180000000L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x300000000000000L, active2, 0L);
      case 99:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 140, 428);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 144, 428);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x26000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 429);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 166, 429);
         break;
      case 65:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 429);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 429);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 429);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 66:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 429);
         break;
      case 68:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 429);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 135, 429);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 136, 429);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 429);
         break;
      case 69:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 429);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 429);
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xf800L, active2, 0x380000020L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 71:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 429);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 429);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 73:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 429);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 429);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 429);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 429);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 110, 429);
         break;
      case 75:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 429);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 429);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 429);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 139, 429);
         break;
      case 76:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 429);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 77:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 429);
         break;
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60L, active2, 0L);
      case 80:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 429);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 429);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 163, 429);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 164, 429);
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xa0000000000L);
      case 81:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 429);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 429);
         break;
      case 82:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 429);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 429);
         break;
      case 83:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 429);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L, active2, 0x20000040L);
      case 84:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 125, 429);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 126, 429);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 156, 429);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 85:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 429);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x90L, active2, 0x40000000L);
      case 88:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 429);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 429);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 429);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x6L);
      case 99:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 141, 429);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 142, 429);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 429);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 65:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 430);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 67:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 159, 430);
         break;
      case 69:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 71:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 430);
         break;
      case 76:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 430);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 430);
         break;
      case 77:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 430);
         break;
      case 79:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 131, 430);
         break;
      case 80:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 81:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 430);
         break;
      case 82:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 430);
         break;
      case 83:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 132, 430);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 430);
         break;
      case 84:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 133, 430);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 134, 430);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 161, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000006L);
      case 86:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 171, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x60L, active2, 0L);
      case 99:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 143, 430);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 54:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 431);
         break;
      case 69:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 431);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 431);
         break;
      case 76:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 167, 431);
         break;
      case 77:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 431);
         break;
      case 79:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x20000000L);
      case 83:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 129, 431);
         break;
      case 85:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 431);
         break;
      case 99:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 169, 431);
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa7_0(active2, 0x20000000L);
      case 99:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 170, 432);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(5, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 157, 267);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, 0L, active2);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 427;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjstateSet[jjnewStateCnt++] = 170;
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjstateSet[jjnewStateCnt++] = 138;
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjstateSet[jjnewStateCnt++] = 122;
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjstateSet[jjnewStateCnt++] = 106;
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjstateSet[jjnewStateCnt++] = 98;
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjstateSet[jjnewStateCnt++] = 90;
                  }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjstateSet[jjnewStateCnt++] = 40;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjstateSet[jjnewStateCnt++] = 32;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjstateSet[jjnewStateCnt++] = 28;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                     jjstateSet[jjnewStateCnt++] = 24;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjstateSet[jjnewStateCnt++] = 20;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjstateSet[jjnewStateCnt++] = 18;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjstateSet[jjnewStateCnt++] = 16;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjstateSet[jjnewStateCnt++] = 14;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if (curChar == 36)
                     jjAddStates(6, 13);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 48)
                     jjCheckNAddStates(14, 25);
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  if ((0x3e000000000000L & l) != 0L)
                     jjAddStates(26, 27);
                  else if (curChar == 54)
                     jjAddStates(28, 33);
                  if ((0xe000000000000L & l) != 0L)
                     jjAddStates(34, 35);
                  else if (curChar == 52)
                     jjAddStates(36, 51);
                  else if (curChar == 54)
                     jjAddStates(52, 53);
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 52)
                     jjAddStates(54, 55);
                  else if (curChar == 50)
                     jjAddStates(56, 57);
                  if (curChar == 49)
                     jjAddStates(58, 59);
                  else if (curChar == 50)
                     jjAddStates(60, 61);
                  break;
               case 274:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(62, 66);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(67, 70);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddTwoStates(269, 270);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 429:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddTwoStates(269, 270);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  break;
               case 430:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddTwoStates(269, 270);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 428:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(67, 70);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddTwoStates(269, 270);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 431:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 432:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  break;
               case 427:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x3000000000000L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 4:
                  if ((0xff000000000000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 5:
                  if (curChar == 47)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 12:
                  if (curChar == 36)
                     jjAddStates(6, 13);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
               case 218:
                  if ((0x3ff000000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(21);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(25);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(29);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(74, 79);
                  break;
               case 33:
               case 234:
                  if ((0x3ff000000000000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(33);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(80, 82);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(83, 86);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(87, 91);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(92, 97);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(41);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(98, 100);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(101, 104);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(105, 109);
                  break;
               case 47:
                  if (curChar == 48)
                     jjCheckNAddStates(14, 25);
                  break;
               case 48:
                  if ((0xe000000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0xff000000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 51:
                  if ((0xe000000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0xff000000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 54:
                  if (curChar == 49)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(110, 112);
                  break;
               case 57:
                  if ((0xff000000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 58:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(57);
                  break;
               case 59:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 60:
                  if (curChar == 49)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(113, 115);
                  break;
               case 63:
                  if ((0xff000000000000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 64:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(63);
                  break;
               case 65:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddTwoStates(63, 64);
                  break;
               case 66:
                  if ((0xe000000000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(116, 123);
                  break;
               case 69:
                  if ((0xff000000000000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 70:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(69);
                  break;
               case 71:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(69, 70);
                  break;
               case 72:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(124, 126);
                  break;
               case 73:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(127, 130);
                  break;
               case 74:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(131, 135);
                  break;
               case 75:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(136, 141);
                  break;
               case 76:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(142, 148);
                  break;
               case 77:
                  if ((0xe000000000000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 78:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(149, 156);
                  break;
               case 80:
                  if ((0xff000000000000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 81:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(80);
                  break;
               case 82:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddTwoStates(80, 81);
                  break;
               case 83:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(157, 159);
                  break;
               case 84:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(160, 163);
                  break;
               case 85:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(164, 168);
                  break;
               case 86:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(169, 174);
                  break;
               case 87:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(175, 181);
                  break;
               case 90:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(182, 187);
                  break;
               case 91:
                  if ((0x3000000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 92:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(91);
                  break;
               case 93:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(91, 92);
                  break;
               case 94:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(188, 190);
                  break;
               case 95:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(191, 194);
                  break;
               case 96:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(195, 199);
                  break;
               case 97:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(200, 205);
                  break;
               case 99:
                  if ((0x3000000000000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 100:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(99);
                  break;
               case 101:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(99, 100);
                  break;
               case 102:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(206, 208);
                  break;
               case 103:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(209, 212);
                  break;
               case 104:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(213, 217);
                  break;
               case 105:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(218, 231);
                  break;
               case 107:
                  if ((0x3000000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 108:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(107);
                  break;
               case 109:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(107, 108);
                  break;
               case 110:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(232, 234);
                  break;
               case 111:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(235, 238);
                  break;
               case 112:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(239, 243);
                  break;
               case 113:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(244, 249);
                  break;
               case 114:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(250, 256);
                  break;
               case 115:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(257, 264);
                  break;
               case 116:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(265, 273);
                  break;
               case 117:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(274, 283);
                  break;
               case 118:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(284, 294);
                  break;
               case 119:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(295, 306);
                  break;
               case 120:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(307, 319);
                  break;
               case 121:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(320, 333);
                  break;
               case 123:
                  if ((0x3000000000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 124:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(123);
                  break;
               case 125:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(123, 124);
                  break;
               case 126:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(334, 336);
                  break;
               case 127:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(337, 340);
                  break;
               case 128:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(341, 345);
                  break;
               case 129:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(346, 351);
                  break;
               case 130:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(352, 358);
                  break;
               case 131:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(359, 366);
                  break;
               case 132:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(367, 375);
                  break;
               case 133:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(376, 385);
                  break;
               case 134:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(386, 396);
                  break;
               case 135:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(397, 408);
                  break;
               case 136:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(409, 421);
                  break;
               case 137:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 138:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(422, 451);
                  break;
               case 139:
                  if ((0x3000000000000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 140:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(139);
                  break;
               case 141:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(139, 140);
                  break;
               case 142:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(452, 454);
                  break;
               case 143:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(455, 458);
                  break;
               case 144:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(459, 463);
                  break;
               case 145:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(464, 469);
                  break;
               case 146:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(470, 476);
                  break;
               case 147:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(477, 484);
                  break;
               case 148:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(485, 493);
                  break;
               case 149:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(494, 503);
                  break;
               case 150:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(504, 514);
                  break;
               case 151:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(515, 526);
                  break;
               case 152:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(527, 539);
                  break;
               case 153:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(540, 553);
                  break;
               case 154:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(554, 568);
                  break;
               case 155:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(569, 584);
                  break;
               case 156:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(585, 601);
                  break;
               case 157:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(602, 619);
                  break;
               case 158:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(620, 638);
                  break;
               case 159:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(639, 658);
                  break;
               case 160:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(659, 679);
                  break;
               case 161:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(680, 701);
                  break;
               case 162:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(702, 724);
                  break;
               case 163:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(725, 748);
                  break;
               case 164:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(749, 773);
                  break;
               case 165:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(774, 799);
                  break;
               case 166:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(800, 826);
                  break;
               case 167:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(827, 854);
                  break;
               case 168:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(855, 883);
                  break;
               case 169:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 170:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(884, 913);
                  break;
               case 171:
                  if ((0x3000000000000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 172:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(171);
                  break;
               case 173:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(171, 172);
                  break;
               case 174:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(914, 916);
                  break;
               case 175:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(917, 920);
                  break;
               case 176:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(921, 925);
                  break;
               case 177:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(926, 931);
                  break;
               case 178:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(932, 938);
                  break;
               case 179:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(939, 946);
                  break;
               case 180:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(947, 955);
                  break;
               case 181:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(956, 965);
                  break;
               case 182:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(966, 976);
                  break;
               case 183:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(977, 988);
                  break;
               case 184:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(989, 1001);
                  break;
               case 185:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1002, 1015);
                  break;
               case 186:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1016, 1030);
                  break;
               case 187:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1031, 1046);
                  break;
               case 188:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1047, 1063);
                  break;
               case 189:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1064, 1081);
                  break;
               case 190:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1082, 1100);
                  break;
               case 191:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1101, 1120);
                  break;
               case 192:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1121, 1141);
                  break;
               case 193:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1142, 1163);
                  break;
               case 194:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1164, 1186);
                  break;
               case 195:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1187, 1210);
                  break;
               case 196:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1211, 1235);
                  break;
               case 197:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1236, 1261);
                  break;
               case 198:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1262, 1288);
                  break;
               case 199:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1289, 1316);
                  break;
               case 200:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddStates(1317, 1345);
                  break;
               case 201:
                  if (curChar == 50)
                     jjAddStates(60, 61);
                  break;
               case 202:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 203:
                  if ((0x3f000000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 204:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 205:
                  if ((0x3f000000000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 206:
                  if (curChar == 50)
                     jjAddStates(56, 57);
                  break;
               case 207:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(208);
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 209:
                  if ((0x1f000000000000L & l) != 0L)
                     jjCheckNAdd(210);
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 211:
                  if (curChar == 49)
                     jjAddStates(58, 59);
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(208);
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(210);
                  break;
               case 214:
                  if (curChar == 54)
                     jjAddStates(52, 53);
                  break;
               case 215:
                  if ((0x1f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 216:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 217:
               case 226:
               case 416:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(218);
                  break;
               case 219:
                  if ((0x1f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 220:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 221:
               case 229:
               case 419:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(222);
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 223:
                  if ((0x3e000000000000L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(218, 226);
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(222, 229);
                  break;
               case 230:
                  if (curChar == 52)
                     jjAddStates(54, 55);
                  break;
               case 231:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1346, 1351);
                  break;
               case 235:
               case 252:
               case 295:
               case 304:
               case 313:
               case 321:
               case 329:
               case 337:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(234);
                  break;
               case 236:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(234, 235);
                  break;
               case 237:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1352, 1354);
                  break;
               case 238:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1355, 1358);
                  break;
               case 239:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1359, 1363);
                  break;
               case 240:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 241:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 242:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1364, 1369);
                  break;
               case 243:
                  if ((0x3ff000000000000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 244:
               case 260:
               case 345:
               case 353:
               case 361:
               case 369:
               case 376:
               case 383:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(243);
                  break;
               case 245:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(243, 244);
                  break;
               case 246:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1370, 1372);
                  break;
               case 247:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1373, 1376);
                  break;
               case 248:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1377, 1381);
                  break;
               case 249:
                  if ((0xe000000000000L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 250:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 251:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1382, 1388);
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(234, 252);
                  break;
               case 254:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1389, 1391);
                  break;
               case 255:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1392, 1395);
                  break;
               case 256:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1396, 1400);
                  break;
               case 257:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1401, 1406);
                  break;
               case 258:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 259:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1407, 1413);
                  break;
               case 261:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(243, 260);
                  break;
               case 262:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1414, 1416);
                  break;
               case 263:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1417, 1420);
                  break;
               case 264:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1421, 1425);
                  break;
               case 265:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1426, 1431);
                  break;
               case 267:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 189)
                     kind = 189;
                  jjCheckNAdd(267);
                  break;
               case 268:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(0, 5);
                  break;
               case 269:
                  if ((0x3ff000000000000L & l) != 0L && kind > 187)
                     kind = 187;
                  break;
               case 270:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAdd(269);
                  break;
               case 271:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddTwoStates(269, 270);
                  break;
               case 272:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(71, 73);
                  break;
               case 273:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(67, 70);
                  break;
               case 275:
                  if (curChar == 52)
                     jjAddStates(36, 51);
                  break;
               case 276:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 277:
                  if ((0x3f000000000000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 278:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 279:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 285:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 286:
                  if ((0x1ff000000000000L & l) != 0L)
                     jjCheckNAdd(234);
                  break;
               case 287:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 288:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 291:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 294:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 296:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 297:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 298:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 299:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 300:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 301:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 302:
                  if ((0x7f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 303:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 305:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 306:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 305;
                  break;
               case 307:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 308:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 309:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 310:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 311:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 312:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(234, 313);
                  break;
               case 314:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 315:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 314;
                  break;
               case 316:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 315;
                  break;
               case 317:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 318;
                  break;
               case 318:
                  if ((0x1ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 319;
                  break;
               case 319:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 320;
                  break;
               case 320:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1432, 1434);
                  break;
               case 322:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(234, 321);
                  break;
               case 323:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 317;
                  break;
               case 324:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 323;
                  break;
               case 325:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 326:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 327;
                  break;
               case 327:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 328;
                  break;
               case 328:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1435, 1438);
                  break;
               case 330:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(234, 329);
                  break;
               case 331:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1439, 1441);
                  break;
               case 332:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 325;
                  break;
               case 333:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 334:
                  if ((0x1ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 335;
                  break;
               case 335:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 336;
                  break;
               case 336:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1442, 1446);
                  break;
               case 338:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(234, 337);
                  break;
               case 339:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1447, 1449);
                  break;
               case 340:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(1450, 1453);
                  break;
               case 341:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 342;
                  break;
               case 342:
                  if ((0x1ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 343;
                  break;
               case 343:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 344:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1454, 1458);
                  break;
               case 346:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(243, 345);
                  break;
               case 347:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1459, 1461);
                  break;
               case 348:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1462, 1465);
                  break;
               case 349:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 350;
                  break;
               case 350:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 351;
                  break;
               case 351:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 352;
                  break;
               case 352:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1466, 1469);
                  break;
               case 354:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(243, 353);
                  break;
               case 355:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1470, 1472);
                  break;
               case 356:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 349;
                  break;
               case 357:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 358;
                  break;
               case 358:
                  if ((0x1ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 359;
                  break;
               case 359:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 360;
                  break;
               case 360:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(1473, 1475);
                  break;
               case 362:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(243, 361);
                  break;
               case 363:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 357;
                  break;
               case 364:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 363;
                  break;
               case 365:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 366;
                  break;
               case 366:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 367;
                  break;
               case 367:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 368;
                  break;
               case 368:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(243, 369);
                  break;
               case 370:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 365;
                  break;
               case 371:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 370;
                  break;
               case 372:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 371;
                  break;
               case 373:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 374:
                  if ((0x7f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 375;
                  break;
               case 375:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 376;
                  break;
               case 377:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 373;
                  break;
               case 378:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 377;
                  break;
               case 379:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 378;
                  break;
               case 380:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 379;
                  break;
               case 381:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 382;
                  break;
               case 382:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 383;
                  break;
               case 384:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 381;
                  break;
               case 385:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 384;
                  break;
               case 386:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 385;
                  break;
               case 387:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 386;
                  break;
               case 388:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 387;
                  break;
               case 389:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 390;
                  break;
               case 390:
                  if ((0x1ff000000000000L & l) != 0L)
                     jjCheckNAdd(243);
                  break;
               case 391:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 389;
                  break;
               case 392:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 391;
                  break;
               case 393:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 392;
                  break;
               case 394:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 393;
                  break;
               case 395:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 394;
                  break;
               case 396:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 395;
                  break;
               case 397:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 398;
                  break;
               case 398:
                  if ((0x3f000000000000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 399:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 397;
                  break;
               case 400:
                  if (curChar == 55)
                     jjstateSet[jjnewStateCnt++] = 399;
                  break;
               case 401:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 400;
                  break;
               case 402:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 401;
                  break;
               case 403:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 402;
                  break;
               case 404:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 403;
                  break;
               case 405:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 404;
                  break;
               case 406:
                  if (curChar == 54)
                     jjAddStates(28, 33);
                  break;
               case 407:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 408;
                  break;
               case 408:
                  if ((0x7f000000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 409:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 407;
                  break;
               case 410:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 409;
                  break;
               case 411:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 412;
                  break;
               case 412:
                  if ((0x7000000000000L & l) != 0L)
                     jjCheckNAdd(218);
                  break;
               case 413:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 411;
                  break;
               case 414:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 415;
                  break;
               case 415:
                  if ((0x1f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 416;
                  break;
               case 417:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 418;
                  break;
               case 418:
                  if ((0x1f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 419;
                  break;
               case 420:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 421;
                  break;
               case 421:
                  if ((0x7000000000000L & l) != 0L)
                     jjCheckNAdd(222);
                  break;
               case 422:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 420;
                  break;
               case 423:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 424;
                  break;
               case 424:
                  if ((0x7f000000000000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 425:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 423;
                  break;
               case 426:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 425;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 89:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjstateSet[jjnewStateCnt++] = 40;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjstateSet[jjnewStateCnt++] = 32;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjstateSet[jjnewStateCnt++] = 28;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                     jjstateSet[jjnewStateCnt++] = 24;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjstateSet[jjnewStateCnt++] = 20;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjstateSet[jjnewStateCnt++] = 18;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjstateSet[jjnewStateCnt++] = 16;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjstateSet[jjnewStateCnt++] = 14;
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddTwoStates(267, 268);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if (curChar == 66)
                     jjAddStates(1476, 1481);
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 274:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(62, 66);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(67, 70);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddTwoStates(269, 270);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 429:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddTwoStates(269, 270);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 9:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  break;
               case 430:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddTwoStates(269, 270);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 428:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(67, 70);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddTwoStates(269, 270);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 431:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAdd(269);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 432:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                  }
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  break;
               case 427:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     jjCheckNAddStates(0, 5);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     jjCheckNAdd(267);
                  }
                  break;
               case 3:
                  if ((0x7e0000007eL & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 6:
                  if (kind > 50)
                     kind = 50;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 17:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7e0000007eL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(21);
                  break;
               case 23:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(25);
                  break;
               case 27:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(29);
                  break;
               case 31:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(74, 79);
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(33);
                  break;
               case 35:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 36:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(80, 82);
                  break;
               case 37:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(83, 86);
                  break;
               case 38:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(87, 91);
                  break;
               case 39:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(92, 97);
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(41);
                  break;
               case 43:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 44:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(98, 100);
                  break;
               case 45:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(101, 104);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(105, 109);
                  break;
               case 88:
                  if (curChar == 66)
                     jjAddStates(1476, 1481);
                  break;
               case 266:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddTwoStates(267, 268);
                  break;
               case 267:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 189)
                     kind = 189;
                  jjCheckNAdd(267);
                  break;
               case 268:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(0, 5);
                  break;
               case 269:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 187)
                     kind = 187;
                  break;
               case 270:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAdd(269);
                  break;
               case 271:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddTwoStates(269, 270);
                  break;
               case 272:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(71, 73);
                  break;
               case 273:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAddStates(67, 70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 427 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   269, 270, 271, 272, 273, 274, 13, 15, 17, 19, 23, 27, 31, 39, 48, 49, 
   51, 52, 54, 55, 60, 61, 66, 67, 77, 78, 224, 227, 410, 413, 414, 417, 
   422, 426, 250, 258, 284, 292, 300, 308, 316, 324, 332, 333, 341, 356, 364, 372, 
   380, 388, 396, 405, 215, 219, 231, 240, 207, 209, 212, 213, 202, 204, 269, 270, 
   271, 272, 273, 269, 270, 271, 272, 269, 270, 271, 33, 34, 35, 36, 37, 38, 
   33, 34, 35, 33, 34, 35, 36, 33, 34, 35, 36, 37, 41, 42, 43, 44, 
   45, 46, 41, 42, 43, 41, 42, 43, 44, 41, 42, 43, 44, 45, 57, 58, 
   59, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 69, 70, 71, 69, 
   70, 71, 72, 69, 70, 71, 72, 73, 69, 70, 71, 72, 73, 74, 69, 70, 
   71, 72, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 80, 81, 82, 
   80, 81, 82, 83, 80, 81, 82, 83, 84, 80, 81, 82, 83, 84, 85, 80, 
   81, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 91, 92, 93, 91, 
   92, 93, 94, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 99, 100, 
   101, 99, 100, 101, 102, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 
   113, 114, 115, 116, 117, 118, 119, 120, 107, 108, 109, 107, 108, 109, 110, 107, 
   108, 109, 110, 111, 107, 108, 109, 110, 111, 112, 107, 108, 109, 110, 111, 112, 
   113, 107, 108, 109, 110, 111, 112, 113, 114, 107, 108, 109, 110, 111, 112, 113, 
   114, 115, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 107, 108, 109, 110, 
   111, 112, 113, 114, 115, 116, 117, 107, 108, 109, 110, 111, 112, 113, 114, 115, 
   116, 117, 118, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 
   123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 123, 124, 
   125, 123, 124, 125, 126, 123, 124, 125, 126, 127, 123, 124, 125, 126, 127, 128, 
   123, 124, 125, 126, 127, 128, 129, 123, 124, 125, 126, 127, 128, 129, 130, 123, 
   124, 125, 126, 127, 128, 129, 130, 131, 123, 124, 125, 126, 127, 128, 129, 130, 
   131, 132, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 123, 124, 125, 
   126, 127, 128, 129, 130, 131, 132, 133, 134, 123, 124, 125, 126, 127, 128, 129, 
   130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 
   149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 
   165, 166, 167, 168, 139, 140, 141, 139, 140, 141, 142, 139, 140, 141, 142, 143, 
   139, 140, 141, 142, 143, 144, 139, 140, 141, 142, 143, 144, 145, 139, 140, 141, 
   142, 143, 144, 145, 146, 139, 140, 141, 142, 143, 144, 145, 146, 147, 139, 140, 
   141, 142, 143, 144, 145, 146, 147, 148, 139, 140, 141, 142, 143, 144, 145, 146, 
   147, 148, 149, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 139, 
   140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 139, 140, 141, 142, 
   143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 139, 140, 141, 142, 143, 144, 
   145, 146, 147, 148, 149, 150, 151, 152, 153, 139, 140, 141, 142, 143, 144, 145, 
   146, 147, 148, 149, 150, 151, 152, 153, 154, 139, 140, 141, 142, 143, 144, 145, 
   146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 139, 140, 141, 142, 143, 144, 
   145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 139, 140, 141, 142, 
   143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 139, 
   140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 
   156, 157, 158, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 
   152, 153, 154, 155, 156, 157, 158, 159, 139, 140, 141, 142, 143, 144, 145, 146, 
   147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 139, 140, 
   141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 
   157, 158, 159, 160, 161, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 
   150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 139, 140, 141, 
   142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 
   158, 159, 160, 161, 162, 163, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 
   149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 
   139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 
   155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 139, 140, 141, 142, 143, 
   144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
   160, 161, 162, 163, 164, 165, 166, 139, 140, 141, 142, 143, 144, 145, 146, 147, 
   148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 
   164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 
   183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 
   199, 200, 171, 172, 173, 171, 172, 173, 174, 171, 172, 173, 174, 175, 171, 172, 
   173, 174, 175, 176, 171, 172, 173, 174, 175, 176, 177, 171, 172, 173, 174, 175, 
   176, 177, 178, 171, 172, 173, 174, 175, 176, 177, 178, 179, 171, 172, 173, 174, 
   175, 176, 177, 178, 179, 180, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 
   181, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 171, 172, 173, 
   174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 171, 172, 173, 174, 175, 176, 
   177, 178, 179, 180, 181, 182, 183, 184, 171, 172, 173, 174, 175, 176, 177, 178, 
   179, 180, 181, 182, 183, 184, 185, 171, 172, 173, 174, 175, 176, 177, 178, 179, 
   180, 181, 182, 183, 184, 185, 186, 171, 172, 173, 174, 175, 176, 177, 178, 179, 
   180, 181, 182, 183, 184, 185, 186, 187, 171, 172, 173, 174, 175, 176, 177, 178, 
   179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 171, 172, 173, 174, 175, 176, 
   177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 171, 172, 173, 
   174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 
   190, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 
   186, 187, 188, 189, 190, 191, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 
   181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 171, 172, 173, 174, 
   175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 
   191, 192, 193, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 
   184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 171, 172, 173, 174, 175, 
   176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 
   192, 193, 194, 195, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 
   183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 171, 172, 
   173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 
   189, 190, 191, 192, 193, 194, 195, 196, 197, 171, 172, 173, 174, 175, 176, 177, 
   178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 
   194, 195, 196, 197, 198, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 
   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 
   198, 199, 234, 235, 236, 237, 238, 239, 234, 235, 236, 234, 235, 236, 237, 234, 
   235, 236, 237, 238, 243, 244, 245, 246, 247, 248, 243, 244, 245, 243, 244, 245, 
   246, 243, 244, 245, 246, 247, 234, 252, 253, 254, 255, 256, 257, 234, 252, 253, 
   234, 252, 253, 254, 234, 252, 253, 254, 255, 234, 252, 253, 254, 255, 256, 243, 
   260, 261, 262, 263, 264, 265, 243, 260, 261, 243, 260, 261, 262, 243, 260, 261, 
   262, 263, 243, 260, 261, 262, 263, 264, 234, 321, 322, 234, 329, 330, 331, 234, 
   329, 330, 234, 337, 338, 339, 340, 234, 337, 338, 234, 337, 338, 339, 243, 345, 
   346, 347, 348, 243, 345, 346, 243, 345, 346, 347, 243, 353, 354, 355, 243, 353, 
   354, 243, 361, 362, 89, 97, 105, 121, 137, 169, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\102", "\127", "\114", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\53", "\55", "\57", "\52", "\50", "\51", "\133", "\135", 
"\173", "\175", "\72", "\73", "\56", "\54", "\46", "\174", "\41", "\44", "\45", "\43", 
null, "\103\117\104\105", "\117\122\107", "\104\104\101\124\101", 
"\102\131\124\105", "\127\117\122\104", "\114\117\116\107", "\105\130\124", "\104\105\106", 
"\105\121\125", "\105\116\104", null, null, "\120\103", "\123\122", "\103\103\122", 
"\123\120", "\105\130\107", "\106\115\117\126\105", "\106\123\115\117\126\105", 
"\106\104\115\117\126\105", "\106\115\117\126\105\115", "\114\105\101", "\114\111\116\113", 
"\115\117\126\105", "\115\117\126\105\61\66", "\115\117\126\105\101", "\115\117\126\105\115", 
"\115\117\126\105\120", "\115\117\126\105\121", "\120\105\101", "\125\116\114\113", "\101\104\104", 
"\101\104\104\101", "\101\104\104\111", "\101\104\104\121", "\101\104\104\130", "\103\114\122", 
"\103\115\120", "\103\115\120\101", "\103\115\120\111", "\103\115\120\115", "\103\115\120\62", 
"\104\111\126\123", "\104\111\126\125", "\104\111\126\123\114", "\104\111\126\125\114", 
"\105\130\124\102", "\115\125\114\123", "\115\125\114\125", "\116\105\107", "\116\105\107\130", 
"\123\125\102", "\123\125\102\101", "\123\125\102\111", "\123\125\102\121", 
"\123\125\102\130", "\101\116\104", "\101\116\104\111", "\105\117\122", "\105\117\122\111", 
"\116\117\124", "\117\122", "\117\122\111", "\101\123\114", "\101\123\122", "\114\123\114", 
"\114\123\122", "\122\117\114", "\122\117\122", "\122\117\130\114", "\122\117\130\122", 
"\123\127\101\120", "\102\103\110\107", "\102\103\114\122", "\102\123\105\124", 
"\102\124\123\124", "\102\106\103\110\107", "\102\106\103\114\122", "\102\106\105\130\124\123", 
"\102\106\105\130\124\125", "\102\106\106\106\117", "\102\106\111\116\123", "\102\106\123\105\124", 
"\102\106\124\123\124", "\101\102\103\104", "\116\102\103\104", "\120\101\103\113", 
"\123\102\103\104", "\125\116\120\113", "\102\143\143", "\106\102\143\143", "\104\102\143\143", 
"\106\104\102\143\143", "\123\143\143", "\106\123\143\143", "\102\122\101", "\102\123\122", 
"\112\115\120", "\112\123\122", "\116\117\120", "\106\116\117\120", "\122\124\104", 
"\122\124\122", "\122\124\123", "\124\123\124", "\106\124\123\124", 
"\106\122\105\123\124\117\122\105", "\106\123\101\126\105", "\115\117\126\105\103", "\115\117\126\105\123", 
"\122\105\123\105\124", "\122\124\105", "\123\124\117\120", "\102\113\124\120", "\103\110\113", 
"\103\110\113\62", "\111\114\105\107\101\114", "\124\122\101\120", "\124\122\101\120\143\143", 
"\106\124\122\101\120\143\143", "\124\122\101\120\126", "\103\103", "\114\123", "\103\123", "\114\124", 
"\105\121", "\115\111", "\116\105", "\107\105", "\120\114", "\107\124", "\124", 
"\110\111", "\126\103", "\114\105", "\126\123", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x3fffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[427];
static private final int[] jjstateSet = new int[854];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public ProyectoFase3TokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ProyectoFase3TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 427; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
               System.out.println("Line: "+matchedToken.beginLine+" Tama\u00f1o byte("+image+")");
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
               System.out.println("Line: "+matchedToken.beginLine+" Tama\u00f1o word("+image+")");
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
               System.out.println("Line: "+matchedToken.beginLine+" Tama\u00f1o long("+image+")");
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                System.out.println("Line: "+matchedToken.beginLine+" Mas("+image+")");
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Guion("+image+")");
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                     System.out.println("Line: "+matchedToken.beginLine+" Diagonal("+image+")");
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Asterisco("+image+")");
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Parentesis Abre("+image+")");
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Parentesis Cierra("+image+")");
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Corchete Abre("+image+")");
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Corchete Cierra("+image+")");
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                   System.out.println("Line: "+matchedToken.beginLine+" Llave Abre("+image+")");
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                   System.out.println("Line: "+matchedToken.beginLine+" Llave Cierra("+image+")");
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Dos Puntos("+image+")");
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Punto y Coma("+image+")");
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Punto("+image+")");
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                 System.out.println("Line: "+matchedToken.beginLine+" Coma("+image+")");
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                     System.out.println("Line: "+matchedToken.beginLine+" Apersant("+image+")");
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Linea("+image+")");
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                       System.out.println("Line: "+matchedToken.beginLine+" Signo de Admiracion("+image+")");
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Signo de Pesos("+image+")");
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                       System.out.println("Line: "+matchedToken.beginLine+" Porcentaje("+image+")");
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                 System.out.println("Line: "+matchedToken.beginLine+" Gato("+image+")");
         break;
      case 50 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println("Line: "+matchedToken.beginLine+" Comentario("+image+")");
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Directiva("+image+")");
         break;
      case 61 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("Line: "+matchedToken.beginLine+" Registro de datos("+image+")");
         break;
      case 62 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("Line: "+matchedToken.beginLine+" Registro de memoria("+image+")");
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                System.out.println("Line: "+matchedToken.beginLine+" Registro("+image+")");
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                System.out.println("Line: "+matchedToken.beginLine+" Registro("+image+")");
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Registro("+image+")");
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                System.out.println("Line: "+matchedToken.beginLine+" Registro("+image+")");
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 88 :
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 89 :
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 92 :
        image.append(jjstrLiteralImages[92]);
        lengthOfMatch = jjstrLiteralImages[92].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 93 :
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 94 :
        image.append(jjstrLiteralImages[94]);
        lengthOfMatch = jjstrLiteralImages[94].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 95 :
        image.append(jjstrLiteralImages[95]);
        lengthOfMatch = jjstrLiteralImages[95].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 96 :
        image.append(jjstrLiteralImages[96]);
        lengthOfMatch = jjstrLiteralImages[96].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 97 :
        image.append(jjstrLiteralImages[97]);
        lengthOfMatch = jjstrLiteralImages[97].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 98 :
        image.append(jjstrLiteralImages[98]);
        lengthOfMatch = jjstrLiteralImages[98].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 99 :
        image.append(jjstrLiteralImages[99]);
        lengthOfMatch = jjstrLiteralImages[99].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 100 :
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 101 :
        image.append(jjstrLiteralImages[101]);
        lengthOfMatch = jjstrLiteralImages[101].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 102 :
        image.append(jjstrLiteralImages[102]);
        lengthOfMatch = jjstrLiteralImages[102].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 103 :
        image.append(jjstrLiteralImages[103]);
        lengthOfMatch = jjstrLiteralImages[103].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 104 :
        image.append(jjstrLiteralImages[104]);
        lengthOfMatch = jjstrLiteralImages[104].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 105 :
        image.append(jjstrLiteralImages[105]);
        lengthOfMatch = jjstrLiteralImages[105].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 106 :
        image.append(jjstrLiteralImages[106]);
        lengthOfMatch = jjstrLiteralImages[106].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 107 :
        image.append(jjstrLiteralImages[107]);
        lengthOfMatch = jjstrLiteralImages[107].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 108 :
        image.append(jjstrLiteralImages[108]);
        lengthOfMatch = jjstrLiteralImages[108].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 109 :
        image.append(jjstrLiteralImages[109]);
        lengthOfMatch = jjstrLiteralImages[109].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 110 :
        image.append(jjstrLiteralImages[110]);
        lengthOfMatch = jjstrLiteralImages[110].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 111 :
        image.append(jjstrLiteralImages[111]);
        lengthOfMatch = jjstrLiteralImages[111].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 112 :
        image.append(jjstrLiteralImages[112]);
        lengthOfMatch = jjstrLiteralImages[112].length();
                System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 113 :
        image.append(jjstrLiteralImages[113]);
        lengthOfMatch = jjstrLiteralImages[113].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 114 :
        image.append(jjstrLiteralImages[114]);
        lengthOfMatch = jjstrLiteralImages[114].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 115 :
        image.append(jjstrLiteralImages[115]);
        lengthOfMatch = jjstrLiteralImages[115].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 116 :
        image.append(jjstrLiteralImages[116]);
        lengthOfMatch = jjstrLiteralImages[116].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 117 :
        image.append(jjstrLiteralImages[117]);
        lengthOfMatch = jjstrLiteralImages[117].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 118 :
        image.append(jjstrLiteralImages[118]);
        lengthOfMatch = jjstrLiteralImages[118].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 119 :
        image.append(jjstrLiteralImages[119]);
        lengthOfMatch = jjstrLiteralImages[119].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 120 :
        image.append(jjstrLiteralImages[120]);
        lengthOfMatch = jjstrLiteralImages[120].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 121 :
        image.append(jjstrLiteralImages[121]);
        lengthOfMatch = jjstrLiteralImages[121].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 122 :
        image.append(jjstrLiteralImages[122]);
        lengthOfMatch = jjstrLiteralImages[122].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 123 :
        image.append(jjstrLiteralImages[123]);
        lengthOfMatch = jjstrLiteralImages[123].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 124 :
        image.append(jjstrLiteralImages[124]);
        lengthOfMatch = jjstrLiteralImages[124].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 125 :
        image.append(jjstrLiteralImages[125]);
        lengthOfMatch = jjstrLiteralImages[125].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 126 :
        image.append(jjstrLiteralImages[126]);
        lengthOfMatch = jjstrLiteralImages[126].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 127 :
        image.append(jjstrLiteralImages[127]);
        lengthOfMatch = jjstrLiteralImages[127].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 128 :
        image.append(jjstrLiteralImages[128]);
        lengthOfMatch = jjstrLiteralImages[128].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 129 :
        image.append(jjstrLiteralImages[129]);
        lengthOfMatch = jjstrLiteralImages[129].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 130 :
        image.append(jjstrLiteralImages[130]);
        lengthOfMatch = jjstrLiteralImages[130].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 131 :
        image.append(jjstrLiteralImages[131]);
        lengthOfMatch = jjstrLiteralImages[131].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 132 :
        image.append(jjstrLiteralImages[132]);
        lengthOfMatch = jjstrLiteralImages[132].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 133 :
        image.append(jjstrLiteralImages[133]);
        lengthOfMatch = jjstrLiteralImages[133].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 134 :
        image.append(jjstrLiteralImages[134]);
        lengthOfMatch = jjstrLiteralImages[134].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 135 :
        image.append(jjstrLiteralImages[135]);
        lengthOfMatch = jjstrLiteralImages[135].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 136 :
        image.append(jjstrLiteralImages[136]);
        lengthOfMatch = jjstrLiteralImages[136].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 137 :
        image.append(jjstrLiteralImages[137]);
        lengthOfMatch = jjstrLiteralImages[137].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 138 :
        image.append(jjstrLiteralImages[138]);
        lengthOfMatch = jjstrLiteralImages[138].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 139 :
        image.append(jjstrLiteralImages[139]);
        lengthOfMatch = jjstrLiteralImages[139].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 140 :
        image.append(jjstrLiteralImages[140]);
        lengthOfMatch = jjstrLiteralImages[140].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 141 :
        image.append(jjstrLiteralImages[141]);
        lengthOfMatch = jjstrLiteralImages[141].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 142 :
        image.append(jjstrLiteralImages[142]);
        lengthOfMatch = jjstrLiteralImages[142].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 143 :
        image.append(jjstrLiteralImages[143]);
        lengthOfMatch = jjstrLiteralImages[143].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 144 :
        image.append(jjstrLiteralImages[144]);
        lengthOfMatch = jjstrLiteralImages[144].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 145 :
        image.append(jjstrLiteralImages[145]);
        lengthOfMatch = jjstrLiteralImages[145].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 146 :
        image.append(jjstrLiteralImages[146]);
        lengthOfMatch = jjstrLiteralImages[146].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 147 :
        image.append(jjstrLiteralImages[147]);
        lengthOfMatch = jjstrLiteralImages[147].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 148 :
        image.append(jjstrLiteralImages[148]);
        lengthOfMatch = jjstrLiteralImages[148].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 149 :
        image.append(jjstrLiteralImages[149]);
        lengthOfMatch = jjstrLiteralImages[149].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 150 :
        image.append(jjstrLiteralImages[150]);
        lengthOfMatch = jjstrLiteralImages[150].length();
                 System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 151 :
        image.append(jjstrLiteralImages[151]);
        lengthOfMatch = jjstrLiteralImages[151].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 152 :
        image.append(jjstrLiteralImages[152]);
        lengthOfMatch = jjstrLiteralImages[152].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 153 :
        image.append(jjstrLiteralImages[153]);
        lengthOfMatch = jjstrLiteralImages[153].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 154 :
        image.append(jjstrLiteralImages[154]);
        lengthOfMatch = jjstrLiteralImages[154].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 155 :
        image.append(jjstrLiteralImages[155]);
        lengthOfMatch = jjstrLiteralImages[155].length();
                  System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 156 :
        image.append(jjstrLiteralImages[156]);
        lengthOfMatch = jjstrLiteralImages[156].length();
                    System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 157 :
        image.append(jjstrLiteralImages[157]);
        lengthOfMatch = jjstrLiteralImages[157].length();
                            System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 158 :
        image.append(jjstrLiteralImages[158]);
        lengthOfMatch = jjstrLiteralImages[158].length();
                          System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 159 :
        image.append(jjstrLiteralImages[159]);
        lengthOfMatch = jjstrLiteralImages[159].length();
                          System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 160 :
        image.append(jjstrLiteralImages[160]);
        lengthOfMatch = jjstrLiteralImages[160].length();
                          System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 161 :
        image.append(jjstrLiteralImages[161]);
        lengthOfMatch = jjstrLiteralImages[161].length();
                          System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 162 :
        image.append(jjstrLiteralImages[162]);
        lengthOfMatch = jjstrLiteralImages[162].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 163 :
        image.append(jjstrLiteralImages[163]);
        lengthOfMatch = jjstrLiteralImages[163].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 164 :
        image.append(jjstrLiteralImages[164]);
        lengthOfMatch = jjstrLiteralImages[164].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 165 :
        image.append(jjstrLiteralImages[165]);
        lengthOfMatch = jjstrLiteralImages[165].length();
                      System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 166 :
        image.append(jjstrLiteralImages[166]);
        lengthOfMatch = jjstrLiteralImages[166].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 167 :
        image.append(jjstrLiteralImages[167]);
        lengthOfMatch = jjstrLiteralImages[167].length();
                            System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 168 :
        image.append(jjstrLiteralImages[168]);
        lengthOfMatch = jjstrLiteralImages[168].length();
                        System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 169 :
        image.append(jjstrLiteralImages[169]);
        lengthOfMatch = jjstrLiteralImages[169].length();
                            System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 170 :
        image.append(jjstrLiteralImages[170]);
        lengthOfMatch = jjstrLiteralImages[170].length();
                              System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 171 :
        image.append(jjstrLiteralImages[171]);
        lengthOfMatch = jjstrLiteralImages[171].length();
                          System.out.println("Line: "+matchedToken.beginLine+" Mnemotecnico("+image+")");
         break;
      case 172 :
        image.append(jjstrLiteralImages[172]);
        lengthOfMatch = jjstrLiteralImages[172].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 173 :
        image.append(jjstrLiteralImages[173]);
        lengthOfMatch = jjstrLiteralImages[173].length();
               System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 174 :
        image.append(jjstrLiteralImages[174]);
        lengthOfMatch = jjstrLiteralImages[174].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 175 :
        image.append(jjstrLiteralImages[175]);
        lengthOfMatch = jjstrLiteralImages[175].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 176 :
        image.append(jjstrLiteralImages[176]);
        lengthOfMatch = jjstrLiteralImages[176].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 177 :
        image.append(jjstrLiteralImages[177]);
        lengthOfMatch = jjstrLiteralImages[177].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 178 :
        image.append(jjstrLiteralImages[178]);
        lengthOfMatch = jjstrLiteralImages[178].length();
                System.out.println("Line:   "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 179 :
        image.append(jjstrLiteralImages[179]);
        lengthOfMatch = jjstrLiteralImages[179].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 180 :
        image.append(jjstrLiteralImages[180]);
        lengthOfMatch = jjstrLiteralImages[180].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 181 :
        image.append(jjstrLiteralImages[181]);
        lengthOfMatch = jjstrLiteralImages[181].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 182 :
        image.append(jjstrLiteralImages[182]);
        lengthOfMatch = jjstrLiteralImages[182].length();
              System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 183 :
        image.append(jjstrLiteralImages[183]);
        lengthOfMatch = jjstrLiteralImages[183].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 184 :
        image.append(jjstrLiteralImages[184]);
        lengthOfMatch = jjstrLiteralImages[184].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 185 :
        image.append(jjstrLiteralImages[185]);
        lengthOfMatch = jjstrLiteralImages[185].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 186 :
        image.append(jjstrLiteralImages[186]);
        lengthOfMatch = jjstrLiteralImages[186].length();
                System.out.println("Line: "+matchedToken.beginLine+" Condicional("+image+")");
         break;
      case 187 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                    System.out.println("Line: "+matchedToken.beginLine+" Identificador("+image+")");
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
